// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: smplsecretsvaultchain/passport.proto

package types

import (
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type Passport struct {
	Mnemonic    []string `protobuf:"bytes,1,rep,name=mnemonic,proto3" json:"mnemonic,omitempty"`
	Prefix      string   `protobuf:"bytes,2,opt,name=prefix,proto3" json:"prefix,omitempty"`
	Hdpath      string   `protobuf:"bytes,3,opt,name=hdpath,proto3" json:"hdpath,omitempty"`
	ChainSymbol string   `protobuf:"bytes,4,opt,name=chainSymbol,proto3" json:"chainSymbol,omitempty"`
}

func (m *Passport) Reset()         { *m = Passport{} }
func (m *Passport) String() string { return proto.CompactTextString(m) }
func (*Passport) ProtoMessage()    {}
func (*Passport) Descriptor() ([]byte, []int) {
	return fileDescriptor_f14f8ba4ee340814, []int{0}
}
func (m *Passport) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Passport) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Passport.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Passport) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Passport.Merge(m, src)
}
func (m *Passport) XXX_Size() int {
	return m.Size()
}
func (m *Passport) XXX_DiscardUnknown() {
	xxx_messageInfo_Passport.DiscardUnknown(m)
}

var xxx_messageInfo_Passport proto.InternalMessageInfo

func (m *Passport) GetMnemonic() []string {
	if m != nil {
		return m.Mnemonic
	}
	return nil
}

func (m *Passport) GetPrefix() string {
	if m != nil {
		return m.Prefix
	}
	return ""
}

func (m *Passport) GetHdpath() string {
	if m != nil {
		return m.Hdpath
	}
	return ""
}

func (m *Passport) GetChainSymbol() string {
	if m != nil {
		return m.ChainSymbol
	}
	return ""
}

func init() {
	proto.RegisterType((*Passport)(nil), "SmplFinance.smplsecretsvaultchain.smplsecretsvaultchain.Passport")
}

func init() {
	proto.RegisterFile("smplsecretsvaultchain/passport.proto", fileDescriptor_f14f8ba4ee340814)
}

var fileDescriptor_f14f8ba4ee340814 = []byte{
	// 228 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0x52, 0x29, 0xce, 0x2d, 0xc8,
	0x29, 0x4e, 0x4d, 0x2e, 0x4a, 0x2d, 0x29, 0x2e, 0x4b, 0x2c, 0xcd, 0x29, 0x49, 0xce, 0x48, 0xcc,
	0xcc, 0xd3, 0x2f, 0x48, 0x2c, 0x2e, 0x2e, 0xc8, 0x2f, 0x2a, 0xd1, 0x2b, 0x28, 0xca, 0x2f, 0xc9,
	0x17, 0x32, 0x0f, 0xce, 0x2d, 0xc8, 0x71, 0xcb, 0xcc, 0x4b, 0xcc, 0x4b, 0x4e, 0xd5, 0xc3, 0xaa,
	0x03, 0xbb, 0xa8, 0x52, 0x05, 0x17, 0x47, 0x00, 0xd4, 0x28, 0x21, 0x29, 0x2e, 0x8e, 0xdc, 0xbc,
	0xd4, 0xdc, 0xfc, 0xbc, 0xcc, 0x64, 0x09, 0x46, 0x05, 0x66, 0x0d, 0xce, 0x20, 0x38, 0x5f, 0x48,
	0x8c, 0x8b, 0xad, 0xa0, 0x28, 0x35, 0x2d, 0xb3, 0x42, 0x82, 0x49, 0x81, 0x51, 0x83, 0x33, 0x08,
	0xca, 0x03, 0x89, 0x67, 0xa4, 0x14, 0x24, 0x96, 0x64, 0x48, 0x30, 0x43, 0xc4, 0x21, 0x3c, 0x21,
	0x05, 0x2e, 0x6e, 0xb0, 0x05, 0xc1, 0x95, 0xb9, 0x49, 0xf9, 0x39, 0x12, 0x2c, 0x60, 0x49, 0x64,
	0x21, 0xa7, 0x94, 0x13, 0x8f, 0xe4, 0x18, 0x2f, 0x3c, 0x92, 0x63, 0x7c, 0xf0, 0x48, 0x8e, 0x71,
	0xc2, 0x63, 0x39, 0x86, 0x0b, 0x8f, 0xe5, 0x18, 0x6e, 0x3c, 0x96, 0x63, 0x88, 0xf2, 0x4a, 0xcf,
	0x2c, 0xc9, 0x28, 0x4d, 0xd2, 0x4b, 0xce, 0xcf, 0xd5, 0x47, 0xf2, 0x17, 0x98, 0x1d, 0x0c, 0xf1,
	0x41, 0x18, 0xc8, 0x07, 0xce, 0xe0, 0x90, 0xa8, 0xd0, 0xc7, 0x1e, 0x42, 0x25, 0x95, 0x05, 0xa9,
	0xc5, 0x49, 0x6c, 0xe0, 0xf0, 0x31, 0x06, 0x04, 0x00, 0x00, 0xff, 0xff, 0x32, 0x41, 0x5e, 0x9b,
	0x47, 0x01, 0x00, 0x00,
}

func (m *Passport) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Passport) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Passport) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.ChainSymbol) > 0 {
		i -= len(m.ChainSymbol)
		copy(dAtA[i:], m.ChainSymbol)
		i = encodeVarintPassport(dAtA, i, uint64(len(m.ChainSymbol)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.Hdpath) > 0 {
		i -= len(m.Hdpath)
		copy(dAtA[i:], m.Hdpath)
		i = encodeVarintPassport(dAtA, i, uint64(len(m.Hdpath)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Prefix) > 0 {
		i -= len(m.Prefix)
		copy(dAtA[i:], m.Prefix)
		i = encodeVarintPassport(dAtA, i, uint64(len(m.Prefix)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Mnemonic) > 0 {
		for iNdEx := len(m.Mnemonic) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Mnemonic[iNdEx])
			copy(dAtA[i:], m.Mnemonic[iNdEx])
			i = encodeVarintPassport(dAtA, i, uint64(len(m.Mnemonic[iNdEx])))
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func encodeVarintPassport(dAtA []byte, offset int, v uint64) int {
	offset -= sovPassport(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *Passport) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Mnemonic) > 0 {
		for _, s := range m.Mnemonic {
			l = len(s)
			n += 1 + l + sovPassport(uint64(l))
		}
	}
	l = len(m.Prefix)
	if l > 0 {
		n += 1 + l + sovPassport(uint64(l))
	}
	l = len(m.Hdpath)
	if l > 0 {
		n += 1 + l + sovPassport(uint64(l))
	}
	l = len(m.ChainSymbol)
	if l > 0 {
		n += 1 + l + sovPassport(uint64(l))
	}
	return n
}

func sovPassport(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozPassport(x uint64) (n int) {
	return sovPassport(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Passport) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPassport
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Passport: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Passport: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Mnemonic", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPassport
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPassport
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPassport
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Mnemonic = append(m.Mnemonic, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Prefix", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPassport
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPassport
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPassport
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Prefix = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Hdpath", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPassport
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPassport
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPassport
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Hdpath = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChainSymbol", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPassport
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPassport
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPassport
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ChainSymbol = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPassport(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthPassport
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipPassport(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowPassport
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowPassport
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowPassport
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthPassport
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupPassport
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthPassport
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthPassport        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowPassport          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupPassport = fmt.Errorf("proto: unexpected end of group")
)
